{"version":3,"sources":["Stores/Theme/theme.ts","Stores/Modal/modal.ts","Icons/icon-library.tsx","NavBar/NavItem/navitem.tsx","NavBar/navbar.tsx","Pages/pages.js","Modal/modal.js","App.js","serviceWorker.js","index.js"],"names":["theme","id","Math","random","observable","modalStore","iconLibrary","home","code","github","linkedin","mail","expand","colapse","NavItem","Provider","value","color","this","props","className","icon","React","Component","NavBar","observer","internalLink","to","route","externalLink","href","list","listItems","routeLink","key","map","r","itemProp","colorLink","link","backgroundColor","colorMain","style","Object","entries","navigations","index","Home","lazy","Projects","Pages","colorBackground","fallback","exact","path","component","Modal","isOpen","hasBackdrop","internal","external","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.fb8b3c93.chunk.js","sourcesContent":["import { observable } from \"mobx\";\r\n\r\nexport interface ITheme {\r\n  colorMain: string;\r\n  colorBackground: string;\r\n  colorLink: string;\r\n  colorText: string;\r\n}\r\n\r\nclass Theme implements ITheme {\r\n  id = Math.random();\r\n  @observable colorMain = \"#282c34\";\r\n  @observable colorBackground = \"#f4fdff\";\r\n  @observable colorLink = \"#61dafb\";\r\n  @observable colorText = \"black\";\r\n}\r\nconst theme = new Theme();\r\n\r\nexport default theme;\r\n","import { observable } from \"mobx\";\r\n\r\nclass ModalStore {\r\n  @observable component: any = null;\r\n  @observable isOpen: boolean = false;\r\n  @observable hasBackdrop: boolean = false;\r\n}\r\n\r\nconst modalStore = new ModalStore();\r\n\r\nexport default modalStore;\r\n","import React from \"react\";\r\nimport {\r\n  FaHome,\r\n  FaCode,\r\n  FaEnvelope,\r\n  FaLinkedinIn,\r\n  FaGithubAlt,\r\n  FaExpand,\r\n  FaCompress\r\n} from \"react-icons/fa\";\r\n\r\nexport const iconLibrary: { [key: string]: any } = {\r\n  home: <FaHome></FaHome>,\r\n  code: <FaCode></FaCode>,\r\n  github: <FaGithubAlt></FaGithubAlt>,\r\n  linkedin: <FaLinkedinIn></FaLinkedinIn>,\r\n  mail: <FaEnvelope></FaEnvelope>,\r\n  expand: <FaExpand></FaExpand>,\r\n  colapse: <FaCompress></FaCompress>\r\n};\r\n","import React from \"react\";\r\nimport { IconContext } from \"react-icons\";\r\nimport \"./navitem.css\";\r\n\r\nexport interface INavItem {\r\n  icon: any;\r\n  route: string;\r\n  color?: string;\r\n}\r\n\r\nexport default class NavItem extends React.Component<INavItem> {\r\n  render() {\r\n    return (\r\n      <IconContext.Provider\r\n        value={{ color: this.props.color, className: \"global-class-name\" }}\r\n      >\r\n        <div className=\"nav-item\">{this.props.icon}</div>\r\n      </IconContext.Provider>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport { observer } from \"mobx-react\";\r\nimport { ITheme } from \"../Stores/Theme/theme\";\r\nimport NavItem, { INavItem } from \"./NavItem/navitem\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { iconLibrary } from \"../Icons/icon-library\";\r\nimport \"./navbar.css\";\r\n\r\n@observer\r\nexport default class NavBar extends React.Component<{\r\n  theme: ITheme;\r\n  navigations: { [key: string]: INavItem[] };\r\n}> {\r\n  private internalLink = (props: INavItem) => (\r\n    <Link to={props.route}>\r\n      <NavItem {...props}></NavItem>\r\n    </Link>\r\n  );\r\n\r\n  private externalLink = (props: INavItem) => (\r\n    <a href={props.route}>\r\n      <NavItem {...props}></NavItem>\r\n    </a>\r\n  );\r\n\r\n  private list = (\r\n    listItems: INavItem[],\r\n    routeLink: boolean = true,\r\n    key: string\r\n  ) => (\r\n    <ul key={key}>\r\n      {listItems.map(r => {\r\n        const itemProp = {\r\n          icon: iconLibrary[r.icon],\r\n          route: r.route,\r\n          color: this.props.theme.colorLink\r\n        };\r\n        const link = routeLink\r\n          ? this.internalLink(itemProp)\r\n          : this.externalLink(itemProp);\r\n        return <ol key={r.route}>{link}</ol>;\r\n      })}\r\n    </ul>\r\n  );\r\n\r\n  render() {\r\n    const color = { backgroundColor: this.props.theme.colorMain };\r\n\r\n    return (\r\n      <div className=\"navbar-desktop\" style={color}>\r\n        {Object.entries(this.props.navigations).map(([key, value], index) =>\r\n          this.list(value, key === \"internal\", `nav-menu-${index}`)\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import { Route, Switch } from \"react-router-dom\";\r\nimport React, { Suspense, lazy } from \"react\";\r\nimport \"./pages.css\";\r\nimport { observer } from \"mobx-react\";\r\nimport theme from \"../Stores/Theme/theme\";\r\n\r\nconst Home = lazy(() => import(\"./Home/home\"));\r\nconst Projects = lazy(() => import(\"./Projects/projects\"));\r\n\r\nconst Pages = observer(() => {\r\n  const { colorBackground } = theme;\r\n  return (\r\n    <div className=\"desktop-pages\" style={{ backgroundColor: colorBackground }}>\r\n      <Suspense fallback={<div>Loading...</div>}>\r\n        <Switch>\r\n          <Route exact path=\"/\" component={Home} />\r\n          <Route path=\"/projects\" component={Projects} />\r\n        </Switch>\r\n      </Suspense>\r\n    </div>\r\n  );\r\n});\r\n\r\nexport default Pages;\r\n","import React from \"react\";\r\nimport { observer } from \"mobx-react\";\r\nimport modalStore from \"../Stores/Modal/modal\";\r\nimport \"./modal.css\";\r\n\r\nconst Modal = observer(() => {\r\n  const { component, isOpen, hasBackdrop } = modalStore;\r\n  return (\r\n    <div>\r\n      {isOpen ? (\r\n        <div className={hasBackdrop ? \"backdrop\" : \"\"}>\r\n          <div className=\"modal\">{component}</div>\r\n        </div>\r\n      ) : null}\r\n    </div>\r\n  );\r\n});\r\nexport default Modal;\r\n","import React from \"react\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\nimport NavBar from \"./NavBar/navbar\";\nimport Pages from \"./Pages/pages\";\nimport theme from \"./Stores/Theme/theme\";\nimport Modal from \"./Modal/modal\";\nimport \"./App.css\";\n\nconst navigations = {\n  internal: [\n    {\n      icon: \"home\",\n      route: \"\"\n    },\n    {\n      icon: \"code\",\n      route: \"projects\"\n    }\n  ],\n  external: [\n    {\n      icon: \"github\",\n      route: \"https://github.com/StavrosAnastopoulos\"\n    },\n    {\n      icon: \"linkedin\",\n      route: \"https://gr.linkedin.com/in/stavrosanastopoulos\"\n    },\n    {\n      icon: \"mail\",\n      route: \"mailto:anastopoulos.stavros@gmail.com\"\n    }\n  ]\n};\n\nexport default function App() {\n  return (\n    <div>\n      <Router>\n        <NavBar {...{ theme, navigations }}></NavBar>\n        <Pages></Pages>\n      </Router>\n      <Modal></Modal>\n    </div>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}